import streamlit as st
import asyncio
import pandas as pd
import os
import re
import time
import json
from telethon import TelegramClient, sync
from telethon.tl.functions.messages import GetHistoryRequest
from io import BytesIO

# Page config
st.set_page_config(
    page_title="–≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø Telegram",
    page_icon="üì±",
    layout="wide"
)

# Title and description
st.title("üì± –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø Telegram")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
–í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—ã –∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞, –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
""")

# Telegram Extractor functions
async def extract_messages(client, group_links, keyword, limit=1000):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    """
    results = []
    
    for group_link in group_links:
        try:
            # Handle group link format (remove https://t.me/ if present)
            if 'https://t.me/' in group_link:
                group_name = group_link.split('https://t.me/')[1]
            else:
                group_name = group_link
            
            # Get the entity (channel/group)
            entity = await client.get_entity(group_name)
            
            # Get messages
            messages = await client(GetHistoryRequest(
                peer=entity,
                limit=limit,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))
            
            # Filter messages containing the keyword (case insensitive)
            pattern = re.compile(keyword, re.IGNORECASE)
            
            for message in messages.messages:
                if message.message and pattern.search(message.message):
                    # Get message sender
                    try:
                        if message.from_id:
                            sender = await client.get_entity(message.from_id)
                            sender_name = f"{sender.first_name} {sender.last_name if sender.last_name else ''}"
                            sender_username = sender.username if hasattr(sender, 'username') else None
                        else:
                            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            sender_username = None
                    except:
                        sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        sender_username = None
                        
                    results.append({
                        '–≥—Ä—É–ø–ø–∞': group_name,
                        '–¥–∞—Ç–∞': message.date,
                        '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender_name,
                        '–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': sender_username,
                        '—Å–æ–æ–±—â–µ–Ω–∏–µ': message.message,
                        'id_—Å–æ–æ–±—â–µ–Ω–∏—è': message.id,
                        '—Å—Å—ã–ª–∫–∞': f"https://t.me/{group_name}/{message.id}"
                    })
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {group_link}: {str(e)}")
            
    # Create DataFrame
    df = pd.DataFrame(results)
    
    # Sort by date (newest first)
    if not df.empty:
        df = df.sort_values(by='–¥–∞—Ç–∞', ascending=False)
        
    return df

def get_dataframe_excel(df):
    """Convert DataFrame to Excel file bytes for download"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–ü–æ—Å—Ç—ã Telegram', index=False)
    output.seek(0)
    return output.getvalue()

def get_dataframe_csv(df):
    """Convert DataFrame to CSV file bytes for download"""
    output = BytesIO()
    df.to_csv(output, index=False)
    output.seek(0)
    return output.getvalue()

def save_account(name, api_id, api_hash):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    accounts = load_accounts()
    accounts[name] = {"api_id": api_id, "api_hash": api_hash}
    
    with open("telegram_accounts.json", "w", encoding="utf-8") as f:
        json.dump(accounts, f, ensure_ascii=False, indent=4)

def load_accounts():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    try:
        with open("telegram_accounts.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}
    
def delete_account(name):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö"""
    accounts = load_accounts()
    if name in accounts:
        del accounts[name]
        with open("telegram_accounts.json", "w", encoding="utf-8") as f:
            json.dump(accounts, f, ensure_ascii=False, indent=4)
        return True
    return False

# Sidebar for inputs
with st.sidebar:
    st.header("üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram API")
    
    # Account selection section
    accounts = load_accounts()
    account_options = ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"] + list(accounts.keys())
    selected_account = st.selectbox(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π",
        account_options
    )
    
    if selected_account == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç":
        st.markdown("""
        –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤–∞–º –Ω—É–∂–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Telegram.
        –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ [my.telegram.org](https://my.telegram.org/auth?to=apps).
        """)
        
        account_name = st.text_input("üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞", placeholder="–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç")
        api_id = st.text_input("üÜî API ID", type="password")
        api_hash = st.text_input("üîê API Hash", type="password")
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"):
            if account_name and api_id and api_hash:
                save_account(account_name, api_id, api_hash)
                st.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{account_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                st.rerun()
            else:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    else:
        # Display selected account info
        api_id = accounts[selected_account]["api_id"]
        api_hash = accounts[selected_account]["api_hash"]
        st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç: {selected_account}")
        
        # Option to delete the account
        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç"):
            if delete_account(selected_account):
                st.success(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç '{selected_account}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞")
    
    st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
    
    # Group links - one per line
    group_links = st.text_area(
        "üìã –°—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã Telegram (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
        placeholder="groupname1\ngroupname2\nhttps://t.me/groupname3",
        help="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã Telegram –∏–ª–∏ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É"
    )
    
    # Keyword or expression
    keyword = st.text_input(
        "üî§ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        help="–ë—É–¥—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
    )
    
    # Message limit
    message_limit = st.number_input(
        "üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã",
        min_value=100,
        max_value=5000,
        value=1000,
        step=100,
        help="–ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    # Extract button
    extract_button = st.button("üöÄ –ò–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏—è", type="primary")

# Main content area
if extract_button:
    if not api_id or not api_hash:
        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Telegram")
    elif not group_links:
        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É Telegram")
    elif not keyword:
        st.error("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        # Process the group links (split by newline and remove empty lines)
        group_list = [line.strip() for line in group_links.split('\n') if line.strip()]
        
        with st.spinner(f"‚è≥ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{keyword}' –∏–∑ {len(group_list)} –≥—Ä—É–ø–ø..."):
            try:
                # Run the extraction asynchronously
                async def run_extraction():
                    client = TelegramClient('anon', api_id, api_hash)
                    await client.start()
                    df = await extract_messages(client, group_list, keyword, limit=message_limit)
                    await client.disconnect()
                    return df
                
                # Run the async function
                df = asyncio.run(run_extraction())
                
                # Display results
                if df.empty:
                    st.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{keyword}' –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.")
                else:
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(df)} —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '{keyword}'!")
                    
                    # Show dataframe
                    st.dataframe(
                        df[['–≥—Ä—É–ø–ø–∞', '–¥–∞—Ç–∞', '–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '—Å—Å—ã–ª–∫–∞']],
                        hide_index=True,
                        use_container_width=True
                    )
                    
                    # Download buttons
                    col1, col2 = st.columns(2)
                    with col1:
                        excel_data = get_dataframe_excel(df)
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ Excel",
                            data=excel_data,
                            file_name=f"telegram_posts_{keyword}_{time.strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    
                    with col2:
                        csv_data = get_dataframe_csv(df)
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
                            data=csv_data,
                            file_name=f"telegram_posts_{keyword}_{time.strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv"
                        )
                    
            except Exception as e:
                st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

# Add footer
st.markdown("---")
st.markdown("üì± –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –≥—Ä—É–ø–ø Telegram | –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Streamlit –∏ Telethon")