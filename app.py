import streamlit as st
import asyncio
import pandas as pd
import os
import re
import time
import random
from telethon import TelegramClient, sync, errors
from telethon.tl.functions.messages import GetHistoryRequest
from io import BytesIO
from datetime import datetime, timedelta

# Page config
st.set_page_config(
    page_title="–≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π Telegram üì±",
    page_icon="üì±",
    layout="wide"
)

# Title and description
st.title("üì± –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø Telegram")
st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π.
–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ API, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –∑–∞—Ç–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ API-–∫–ª—é—á–µ–π –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. üöÄ
""")

# Telegram Extractor functions
async def check_account_status(client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (–∑–∞–±–∞–Ω–µ–Ω –∏–ª–∏ –Ω–µ—Ç)"""
    try:
        # Try to get dialogs as a simple check
        await client.get_dialogs(limit=1)
        return True, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω"
    except errors.UserDeactivatedBanError:
        return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω"
    except errors.AuthKeyUnregisteredError:
        return False, "‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞"
    except Exception as e:
        return False, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"

async def extract_messages(client, group_links, keyword, limit=1000, progress_callback=None):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    """
    results = []
    total_groups = len(group_links)
    
    for i, group_link in enumerate(group_links):
        try:
            # Update progress
            if progress_callback:
                progress_callback(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {i+1}/{total_groups}: {group_link}", (i / total_groups) * 0.8)
            
            # Handle group link format (remove https://t.me/ if present)
            if 'https://t.me/' in group_link:
                group_name = group_link.split('https://t.me/')[1]
            else:
                group_name = group_link
            
            # Get the entity (channel/group)
            entity = await client.get_entity(group_name)
            
            # Get messages
            messages = await client(GetHistoryRequest(
                peer=entity,
                limit=limit,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))
            
            # Filter messages containing the keyword (case insensitive)
            pattern = re.compile(keyword, re.IGNORECASE)
            
            for msg_idx, message in enumerate(messages.messages):
                # Update progress more frequently
                if progress_callback and msg_idx % 100 == 0:
                    progress_value = (i / total_groups) * 0.8 + (msg_idx / len(messages.messages)) * 0.2 / total_groups
                    progress_callback(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ {group_name}: {msg_idx}/{len(messages.messages)}", progress_value)
                
                if message.message and pattern.search(message.message):
                    # Get message sender
                    try:
                        if message.from_id:
                            sender = await client.get_entity(message.from_id)
                            sender_name = f"{sender.first_name} {sender.last_name if sender.last_name else ''}"
                            sender_username = sender.username if hasattr(sender, 'username') else None
                        else:
                            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                            sender_username = None
                    except:
                        sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                        sender_username = None
                        
                    results.append({
                        'group': group_name,
                        'date': message.date,
                        'sender_name': sender_name,
                        'sender_username': sender_username,
                        'message': message.message,
                        'message_id': message.id,
                        'message_link': f"https://t.me/{group_name}/{message.id}"
                    })
                    
                    # Update progress after finding a match
                    if progress_callback and len(results) % 10 == 0:
                        progress_callback(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(results)}", None)
            
        except Exception as e:
            if progress_callback:
                progress_callback(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {group_link}: {str(e)}", None)
            
    # Create DataFrame
    df = pd.DataFrame(results)
    
    # Sort by date (newest first)
    if not df.empty:
        df = df.sort_values(by='date', ascending=False)
        
    return df

def get_dataframe_excel(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DataFrame –≤ —Ñ–∞–π–ª Excel –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='–ü–æ—Å—Ç—ã Telegram', index=False)
    output.seek(0)
    return output.getvalue()

def get_dataframe_csv(df):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DataFrame –≤ —Ñ–∞–π–ª CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    output = BytesIO()
    df.to_csv(output, index=False)
    output.seek(0)
    return output.getvalue()

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if seconds < 60:
        return f"{seconds:.0f} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        seconds %= 60
        return f"{minutes:.0f} –º–∏–Ω {seconds:.0f} —Å–µ–∫"
    else:
        hours = seconds // 3600
        seconds %= 3600
        minutes = seconds // 60
        seconds %= 60
        return f"{hours:.0f} —á {minutes:.0f} –º–∏–Ω {seconds:.0f} —Å–µ–∫"

# Sidebar for inputs
with st.sidebar:
    st.header("üîë –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram API")
    st.markdown("""
    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∞–º –Ω—É–∂–Ω—ã API-–∫–ª—é—á–∏ Telegram. 
    –ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ [my.telegram.org](https://my.telegram.org/auth?to=apps).
    
    –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏, –≤–≤–µ–¥—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞–±–æ—Ä–æ–≤ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API.
    """)
    
    # Multiple account support
    num_accounts = st.number_input("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram", min_value=1, max_value=10, value=1)
    
    # Create containers for each account
    account_containers = []
    api_credentials = []
    
    for i in range(num_accounts):
        account_container = st.container()
        with account_container:
            st.subheader(f"üì± –ê–∫–∫–∞—É–Ω—Ç {i+1}")
            api_id = st.text_input(f"API ID #{i+1}", type="password", key=f"api_id_{i}")
            api_hash = st.text_input(f"API Hash #{i+1}", type="password", key=f"api_hash_{i}")
            api_credentials.append((api_id, api_hash))
        account_containers.append(account_container)
    
    st.header("üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞")
    
    # Group links - one per line
    group_links = st.text_area(
        "üìã –°—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã Telegram (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
        placeholder="groupname1\ngroupname2\nhttps://t.me/groupname3",
        help="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã Telegram –∏–ª–∏ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø, –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É"
    )
    
    # Keyword or expression
    keyword = st.text_input(
        "üî§ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        help="–ë—É–¥—É—Ç –∏–∑–≤–ª–µ—á–µ–Ω—ã –ø–æ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
    )
    
    # Message limit
    message_limit = st.number_input(
        "üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã",
        min_value=100,
        max_value=5000,
        value=1000,
        step=100,
        help="–ë–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    # Extract button
    extract_button = st.button("üöÄ –ò–∑–≤–ª–µ—á—å –ø–æ—Å—Ç—ã", type="primary")

# Main content area
if extract_button:
    # Check if at least one set of valid API credentials was provided
    valid_credentials = [(i, api_id, api_hash) for i, (api_id, api_hash) in enumerate(api_credentials) if api_id and api_hash]
    
    if not valid_credentials:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API Telegram")
    elif not group_links:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≥—Ä—É–ø–ø—É Telegram")
    elif not keyword:
        st.error("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        # Process the group links (split by newline and remove empty lines)
        group_list = [line.strip() for line in group_links.split('\n') if line.strip()]
        
        # Create status containers
        status_container = st.container()
        with status_container:
            st.subheader("üîÑ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            status_placeholder = st.empty()
        
        progress_container = st.container()
        with progress_container:
            progress_bar = st.progress(0)
            progress_text = st.empty()
            time_info = st.empty()
            results_info = st.empty()
        
        # Record start time
        start_time = time.time()
        posts_found = 0
        
        def update_progress(message, progress_value=None):
            nonlocal posts_found
            if "–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:" in message:
                # Extract number of posts found
                posts_found = int(message.split("–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:")[1].strip())
            
            elapsed_time = time.time() - start_time
            progress_text.text(message)
            
            if progress_value is not None:
                progress_bar.progress(progress_value)
                if progress_value > 0:
                    estimated_total_time = elapsed_time / progress_value
                    remaining_time = estimated_total_time - elapsed_time
                    time_info.text(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {format_time(elapsed_time)} | –û—Å—Ç–∞–ª–æ—Å—å: {format_time(remaining_time)}")
            
            results_info.text(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {posts_found}")
        
        with st.spinner(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ —Å '{keyword}' –∏–∑ {len(group_list)} –≥—Ä—É–ø–ø..."):
            try:
                # Run the extraction asynchronously
                async def run_extraction():
                    # Dictionary to track client status
                    clients = {}
                    active_clients = []
                    status_messages = []
                    
                    # Initialize and check all clients
                    update_progress("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram...", 0.05)
                    
                    for i, api_id, api_hash in valid_credentials:
                        try:
                            client = TelegramClient(f'session_{i}', api_id, api_hash)
                            await client.start()
                            
                            # Check if account is banned
                            is_active, status_msg = await check_account_status(client)
                            status_messages.append(f"–ê–∫–∫–∞—É–Ω—Ç {i+1}: {status_msg}")
                            
                            if is_active:
                                active_clients.append(client)
                                clients[i] = {'client': client, 'status': 'active'}
                            else:
                                await client.disconnect()
                                clients[i] = {'client': None, 'status': 'inactive', 'reason': status_msg}
                        except Exception as e:
                            status_messages.append(f"–ê–∫–∫–∞—É–Ω—Ç {i+1}: ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å - {str(e)}")
                            clients[i] = {'client': None, 'status': 'error', 'reason': str(e)}
                    
                    # Update status display
                    status_placeholder.markdown("\n".join(status_messages))
                    
                    update_progress("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 0.1)
                    
                    if not active_clients:
                        return pd.DataFrame(), "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API."
                    
                    # Distribute groups among active clients for load balancing
                    all_results = []
                    
                    # Distribute groups evenly among active clients
                    num_active_clients = len(active_clients)
                    groups_per_client = {}
                    
                    for i, group in enumerate(group_list):
                        client_idx = i % num_active_clients
                        if client_idx not in groups_per_client:
                            groups_per_client[client_idx] = []
                        groups_per_client[client_idx].append(group)
                    
                    update_progress(f"‚öñÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –º–µ–∂–¥—É {num_active_clients} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏", 0.15)
                    
                    # Process each client's assigned groups
                    tasks = []
                    for idx, groups in groups_per_client.items():
                        client = active_clients[idx]
                        tasks.append(extract_messages(client, groups, keyword, limit=message_limit, progress_callback=update_progress))
                    
                    # Wait for all tasks to complete
                    update_progress("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø...", 0.2)
                    results = await asyncio.gather(*tasks)
                    
                    # Combine all dataframes
                    update_progress("üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...", 0.9)
                    combined_df = pd.concat(results) if results else pd.DataFrame()
                    
                    # Sort by date
                    if not combined_df.empty:
                        combined_df = combined_df.sort_values(by='date', ascending=False)
                    
                    # Disconnect all clients
                    update_progress("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram...", 0.95)
                    for client in active_clients:
                        await client.disconnect()
                    
                    update_progress("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", 1.0)
                    return combined_df, None
                
                # Run the extraction asynchronously
                df, error = asyncio.run(run_extraction())
                
                # Handle results
                if error:
                    st.error(error)
                else:
                    total_time = time.time() - start_time
                    
                    # Display results
                    if not df.empty:
                        st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(df)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {format_time(total_time)}!")
                        
                        # Format the date column for display
                        display_df = df.copy()
                        display_df['date'] = display_df['date'].dt.strftime('%Y-%m-%d %H:%M:%S')
                        
                        # Create tabs for different views
                        tab1, tab2, tab3 = st.tabs(["üìä –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üì• –°–∫–∞—á–∞—Ç—å"])
                        
                        with tab1:
                            st.dataframe(display_df, use_container_width=True)
                        
                        with tab2:
                            st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
                            
                            # Posts per group
                            st.subheader("üì± –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º")
                            group_counts = df['group'].value_counts().reset_index()
                            group_counts.columns = ['–ì—Ä—É–ø–ø–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']
                            
                            fig1 = px.bar(group_counts, 
                                         x='–ì—Ä—É–ø–ø–∞', 
                                         y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
                                         title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º",
                                         color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
                            st.plotly_chart(fig1, use_container_width=True)
                            
                            # Posts over time
                            st.subheader("üìÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
                            df['date_only'] = df['date'].dt.date
                            time_series = df.groupby('date_only').size().reset_index()
                            time_series.columns = ['–î–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']
                            
                            fig2 = px.line(time_series, 
                                          x='–î–∞—Ç–∞', 
                                          y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
                                          title="–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º",
                                          markers=True)
                            st.plotly_chart(fig2, use_container_width=True)
                            
                            # Top senders
                            if 'sender_username' in df.columns and not df['sender_username'].isna().all():
                                st.subheader("üë§ –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
                                sender_counts = df['sender_username'].value_counts().head(10).reset_index()
                                sender_counts.columns = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π']
                                
                                fig3 = px.bar(sender_counts, 
                                             x='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
                                             y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π',
                                             title="–¢–æ–ø-10 –∞–≤—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π",
                                             color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
                                st.plotly_chart(fig3, use_container_width=True)
                        
                        with tab3:
                            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                            
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                excel_data = get_dataframe_excel(df)
                                st.download_button(
                                    label="üìä –°–∫–∞—á–∞—Ç—å Excel",
                                    data=excel_data,
                                    file_name=f"telegram_posts_{keyword}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                                    mime="application/vnd.ms-excel"
                                )
                            
                            with col2:
                                csv_data = get_dataframe_csv(df)
                                st.download_button(
                                    label="üìã –°–∫–∞—á–∞—Ç—å CSV",
                                    data=csv_data,
                                    file_name=f"telegram_posts_{keyword}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                                    mime="text/csv"
                                )
                    else:
                        st.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}' –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö.")
                
            except Exception as e:
                st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                import traceback
                st.error(traceback.format_exc())
else:
    # App description and instructions when first loaded
    st.title("üîé –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram")
    
    st.markdown("""
    ## üì± –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram!
    
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø Telegram, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
    
    ### üöÄ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    
    1. **–í–≤–µ–¥–∏—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API Telegram** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ [my.telegram.org](https://my.telegram.org))
    2. **–î–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤** –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    3. **–£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—ã Telegram** –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)
    4. **–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ** –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    5. **–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π** –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    6. **–ù–∞–∂–º–∏—Ç–µ "–ò–∑–≤–ª–µ—á—å –ø–æ—Å—Ç—ã"** –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    ### üìä –§—É–Ω–∫—Ü–∏–∏:
    
    - –ü–æ–∏—Å–∫ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –≥—Ä—É–ø–ø–∞–º Telegram
    - –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —É–¥–æ–±–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel –∏–ª–∏ CSV
    
    ### ‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö Telegram API:
    
    Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ —ç—Ç–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥—Ä—É–ø–ø.
    """)
    
    st.info("‚ÑπÔ∏è –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É, –≤–≤–µ–¥—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–ò–∑–≤–ª–µ—á—å –ø–æ—Å—Ç—ã'.")                    