# app.py
import streamlit as st
import pandas as pd
import asyncio
import time
import re
import os
from datetime import datetime, timedelta
from telethon.sync import TelegramClient
from telethon import functions, types
from telethon.tl.functions.messages import GetHistoryRequest
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
if 'accounts' not in st.session_state:
    st.session_state.accounts = [{
        'api_id': '',
        'api_hash': '',
        'phone': '',
        'password': ''
    }]

if 'settings' not in st.session_state:
    st.session_state.settings = {
        'request_delay': 2.0,
        'request_batch_size': 100,
        'date_from': None,
        'date_to': None,
        'use_date_filter': False
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–µ—Å—Å–∏–π Telegram
SESSION_DIR = 'telegram_sessions'
os.makedirs(SESSION_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ (–∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã) –ø–æ —Å—Å—ã–ª–∫–µ
async def get_entity(client, group_link):
    try:
        if group_link.startswith('@'):
            return await client.get_entity(group_link)
        elif 'joinchat' in group_link or '+' in group_link:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö—ç—à–∞ –∏–∑ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            invite_hash = group_link.split('/')[-1]
            return await client(functions.messages.ImportChatInviteRequest(invite_hash))
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø
            username = group_link.split('/')[-1]
            return await client.get_entity(username)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_link}: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
async def create_client(account, session_path):
    client = TelegramClient(session_path, account['api_id'], account['api_hash'])
    await client.connect()
    
    if not await client.is_user_authorized():
        await client.send_code_request(account['phone'])
        verification_code = st.text_input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {account['phone']}", key=f"code_{account['phone']}")
        
        if verification_code:
            try:
                await client.sign_in(account['phone'], verification_code)
            except SessionPasswordNeededError:
                if account['password']:
                    await client.sign_in(password=account['password'])
                else:
                    st.error(f"–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {account['phone']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.")
                    return None
    
    return client

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def run_extraction(group_links, keyword, max_messages, progress_bar, progress_text, error_container):
    active_accounts = [acc for acc in st.session_state.accounts if acc['api_id'] and acc['api_hash'] and acc['phone']]
    
    if not active_accounts:
        error_container.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç Telegram API")
        return None
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    group_list = [link.strip() for link in group_links.split('\n') if link.strip()]
    
    if not group_list:
        error_container.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É")
        return None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    clients = []
    for idx, account in enumerate(active_accounts):
        session_path = os.path.join(SESSION_DIR, f"session_{account['phone']}")
        client = await create_client(account, session_path)
        if client:
            clients.append(client)
    
    if not clients:
        error_container.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É Telegram")
        return None
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    def distribute_groups(groups, client_count):
        result = [[] for _ in range(client_count)]
        for i, group in enumerate(groups):
            result[i % client_count].append(group)
        return result
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    distributed_groups = distribute_groups(group_list, len(clients))
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≥—Ä—É–ø–ø—ã * –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π)
    total_progress = len(group_list) * (max_messages if max_messages > 0 else 1000)
    progress_count = 0
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def update_progress(increment=1):
        nonlocal progress_count
        progress_count += increment
        progress_value = min(progress_count / total_progress, 1.0)
        progress_bar.progress(progress_value)
    
    all_results = []
    
    async def process_group(group_link, client_index):
        client = clients[client_index]
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–ø–µ
            entity = await get_entity(client, group_link)
            
            if entity:
                group_name = getattr(entity, 'title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞')
                group_messages = []
                offset_id = 0
                total_messages = 0
                batch_size = st.session_state.settings['request_batch_size']
                
                # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
                date_filter = None
                if st.session_state.settings['use_date_filter']:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–∞—Ç—ã –≤ datetime —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –¥–Ω—è
                    from_date = datetime.combine(st.session_state.settings['date_from'], datetime.min.time())
                    to_date = datetime.combine(st.session_state.settings['date_to'], datetime.max.time())
                    date_filter = lambda msg: from_date <= msg.date.replace(tzinfo=None) <= to_date
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–∞–∫–µ—Ç–∞
                while True:
                    progress_text.text(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã '{group_name}': –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    try:
                        messages = await client(GetHistoryRequest(
                            peer=entity,
                            offset_id=offset_id,
                            offset_date=None,
                            add_offset=0,
                            limit=batch_size,
                            max_id=0,
                            min_id=0,
                            hash=0
                        ))
                    except FloodWaitError as e:
                        wait_time = e.seconds
                        error_container.warning(f"–ê–∫–∫–∞—É–Ω—Ç {client_index+1} –ø–æ–ª—É—á–∏–ª FloodWaitError. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(wait_time)
                        continue
                    
                    if not messages.messages:
                        break
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                    filtered_messages = messages.messages
                    if date_filter:
                        filtered_messages = [msg for msg in messages.messages if date_filter(msg)]
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    for message in filtered_messages:
                        total_messages += 1
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        update_progress()
                        
                        if max_messages > 0 and total_messages > max_messages:
                            break
                        
                        if hasattr(message, 'message') and message.message:
                            message_text = message.message.lower()
                            if keyword.lower() in message_text:
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                sender = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                                if hasattr(message, 'from_id') and message.from_id:
                                    try:
                                        sender_entity = await client.get_entity(message.from_id)
                                        sender = getattr(sender_entity, 'first_name', '') or ''
                                        if hasattr(sender_entity, 'last_name') and sender_entity.last_name:
                                            sender += ' ' + sender_entity.last_name
                                        if hasattr(sender_entity, 'username') and sender_entity.username:
                                            sender += f" (@{sender_entity.username})"
                                    except:
                                        sender = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                                
                                # –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                                message_url = ""
                                if hasattr(entity, 'username') and entity.username:
                                    message_url = f"https://t.me/{entity.username}/{message.id}"
                                
                                group_messages.append({
                                    '–ì—Ä—É–ø–ø–∞': group_name,
                                    '–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É': group_link,
                                    '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å': sender,
                                    '–î–∞—Ç–∞': message.date.strftime('%Y-%m-%d %H:%M:%S'),
                                    '–¢–µ–∫—Å—Ç': message.message,
                                    '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ': message_url
                                })
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
                    await asyncio.sleep(st.session_state.settings['request_delay'])
                    
                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    if messages.messages:
                        offset_id = messages.messages[-1].id
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                    if max_messages > 0 and total_messages >= max_messages:
                        break
                
                return group_messages
                
            else:
                error_container.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: {group_link}")
                return []
                
        except Exception as e:
            error_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_link}: {str(e)}")
            return []
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    tasks = []
    for client_idx, client_groups in enumerate(distributed_groups):
        for group in client_groups:
            tasks.append(process_group(group, client_idx))
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    group_results = await asyncio.gather(*tasks)
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for result in group_results:
        all_results.extend(result)
    
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    for client in clients:
        await client.disconnect()
    
    return all_results

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.title("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    accounts_to_remove = []
    
    for idx, account in enumerate(st.session_state.accounts):
        with st.expander(f"–ê–∫–∫–∞—É–Ω—Ç {idx + 1}", expanded=(idx == 0)):
            api_id = st.text_input(f"API ID #{idx + 1}", value=account['api_id'], key=f"api_id_{idx}")
            api_hash = st.text_input(f"API Hash #{idx + 1}", value=account['api_hash'], key=f"api_hash_{idx}", type="password")
            phone = st.text_input(f"–¢–µ–ª–µ—Ñ–æ–Ω #{idx + 1}", value=account['phone'], key=f"phone_{idx}", 
                                help="–í–∫–ª—é—á–∞—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789)")
            password = st.text_input(f"–ü–∞—Ä–æ–ª—å 2FA #{idx + 1} (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)", value=account['password'], 
                                    key=f"password_{idx}", type="password")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
            st.session_state.accounts[idx]['api_id'] = api_id
            st.session_state.accounts[idx]['api_hash'] = api_hash
            st.session_state.accounts[idx]['phone'] = phone
            st.session_state.accounts[idx]['password'] = password
            
            if idx > 0 and st.button(f"–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç #{idx + 1}", key=f"remove_{idx}"):
                accounts_to_remove.append(idx)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏)
    for idx in sorted(accounts_to_remove, reverse=True):
        st.session_state.accounts.pop(idx)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç"):
        st.session_state.accounts.append({
            'api_id': '',
            'api_hash': '',
            'phone': '',
            'password': ''
        })
        st.experimental_rerun()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –±–∞–Ω–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã API")
    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", expanded=True):
        st.session_state.settings['request_delay'] = st.slider(
            "–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)", 
            min_value=1.0, 
            max_value=10.0, 
            value=st.session_state.settings['request_delay'],
            step=0.5,
            help="–£–≤–µ–ª–∏—á—å—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å —Ä–∏—Å–∫ –±–∞–Ω–∞"
        )
        
        st.session_state.settings['request_batch_size'] = st.slider(
            "–°–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–∫–µ—Ç–µ", 
            min_value=50, 
            max_value=500, 
            value=st.session_state.settings['request_batch_size'],
            step=50,
            help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≤ –∫–∞–∂–¥–æ–º –ø–∞–∫–µ—Ç–µ. –ú–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–∏–∂–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫—É, –Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        )
        
        st.info("‚ö†Ô∏è –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –º–µ–Ω—å—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤ —Å–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –Ω–æ –¥–µ–ª–∞—é—Ç –ø–æ–∏—Å–∫ –º–µ–¥–ª–µ–Ω–Ω–µ–µ.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
st.title("üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö Telegram")

# –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥—Ä—É–ø–ø—ã
group_links = st.text_area(
    "–°—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã Telegram (–ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ)",
    help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/groupname)"
)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
col1, col2 = st.columns(2)

with col1:
    keyword = st.text_input("–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞", 
                           help="–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
    
    max_messages = st.number_input(
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)",
        min_value=0,
        value=1000,
        step=100,
        help="–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã"
    )

with col2:
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    st.session_state.settings['use_date_filter'] = st.checkbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ", 
        value=st.session_state.settings['use_date_filter'],
        help="–í–∫–ª—é—á–∏—Ç—å –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç"
    )
    
    if st.session_state.settings['use_date_filter']:
        date_col1, date_col2 = st.columns(2)
        
        with date_col1:
            st.session_state.settings['date_from'] = st.date_input(
                "–î–∞—Ç–∞ —Å", 
                value=st.session_state.settings['date_from'],
                help="–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            )
        
        with date_col2:
            st.session_state.settings['date_to'] = st.date_input(
                "–î–∞—Ç–∞ –ø–æ", 
                value=st.session_state.settings['date_to'],
                help="–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"
            )

# –†–∞–∑–¥–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
error_container = st.empty()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
if st.button("–ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"):
    if not group_links.strip():
        error_container.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã")
    elif not keyword.strip():
        error_container.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text = st.empty()
        progress_bar = st.progress(0)
        progress_text.text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...")
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
        results = asyncio.run(run_extraction(group_links, keyword, max_messages, 
                                            progress_bar, progress_text, error_container))
        
        if results:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.subheader(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DataFrame
            results_df = pd.DataFrame(results)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
            st.dataframe(results_df)
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∏ Excel
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV",
                data=results_df.to_csv(index=False).encode('utf-8'),
                file_name=f"telegram_search_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            excel_buffer = BytesIO()
            results_df.to_excel(excel_buffer, index=False)
            excel_data = excel_buffer.getvalue()
            
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel",
                data=excel_data,
                file_name=f"telegram_search_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.ms-excel"
            )
            
        else:
            if error_container.empty:
                error_container.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.")
        
        # –°–±—Ä–æ—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar.empty()
        progress_text.empty()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
with st.expander("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"):
    st.markdown("""
    ## –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö Telegram
    
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö Telegram –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.
    
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ API Telegram –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–ø–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ [https://my.telegram.org/apps](https://my.telegram.org/apps))
    2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫
    3. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
    4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
    
    ### –í–∞–∂–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è:
    - –ü—Ä–∏ —á–∞—Å—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Telegram –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–≤—ã—à–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
    """)