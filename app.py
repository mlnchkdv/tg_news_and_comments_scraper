import streamlit as st
import pandas as pd
import numpy as np
import asyncio
import telethon
from telethon.sync import TelegramClient
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.errors import UsernameNotOccupiedError
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import re
import json
import os
import time
from io import BytesIO
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="Telegram Group Analyzer",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'settings' not in st.session_state:
    st.session_state.settings = {}
if 'extra_accounts' not in st.session_state:
    st.session_state.extra_accounts = []
if 'login_complete' not in st.session_state:
    st.session_state.login_complete = False

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async def get_group_entity(client, group_link, error_container):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –ø–æ —Å—Å—ã–ª–∫–µ"""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Å—ã–ª–∫–∏
        if 'https://t.me/' in group_link:
            group_name = group_link.split('https://t.me/')[1].strip()
        elif 't.me/' in group_link:
            group_name = group_link.split('t.me/')[1].strip()
        else:
            group_name = group_link.strip()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        group_name = group_name.rstrip('/')
        
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            return await client.get_entity(group_name)
        except (ValueError, UsernameNotOccupiedError):
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–π —Å—Å—ã–ª–∫–µ
            return await client.get_entity(group_link)
        except telethon.errors.rpcerrorlist.UsernameInvalidError:
            error_container.error(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {group_name}")
            return None
        except telethon.errors.rpcerrorlist.KeyUnregisteredError:
            error_container.error(
                "–û—à–∏–±–∫–∞ API: –ö–ª—é—á –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ API –∫–ª—é—á–∏ –∏ –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. "
                "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return None
    except Exception as e:
        error_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ {group_link}: {str(e)}")
        return None

async def create_client(api_id, api_hash, phone, error_container):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not api_id or not api_hash or not phone:
        error_container.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API ID, API Hash –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        return None
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = TelegramClient(f"session_{phone}", api_id, api_hash)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await client.is_user_authorized():
            # –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            try:
                await client.send_code_request(phone)
                error_container.warning(f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone} –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞–º –≤ Telegram:")
                code = error_container.text_input(f"–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {phone}")
                
                if code:
                    try:
                        await client.sign_in(phone, code)
                        error_container.success(f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                    except telethon.errors.rpcerrorlist.SessionPasswordNeededError:
                        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                        password = error_container.text_input(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {phone}", type="password")
                        if password:
                            await client.sign_in(password=password)
                            error_container.success(f"–ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            except telethon.errors.rpcerrorlist.FloodWaitError as e:
                wait_time = e.seconds
                error_container.error(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
                await client.disconnect()
                return None
            except telethon.errors.rpcerrorlist.PhoneNumberInvalidError:
                error_container.error(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +79123456789")
                await client.disconnect()
                return None
            except telethon.errors.rpcerrorlist.ApiIdInvalidError:
                error_container.error("API ID –∏–ª–∏ API Hash –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                await client.disconnect()
                return None
        
        return client
    except telethon.errors.rpcerrorlist.KeyUnregisteredError:
        error_container.error(
            "–ö–ª—é—á –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∏ API –∫–ª—é—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."
        )
        return None
    except Exception as e:
        error_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telegram: {str(e)}")
        return None

async def get_group_info(client, group_entity, error_container):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
    try:
        if hasattr(group_entity, 'username') and group_entity.username:
            full_info = await client(GetFullChannelRequest(group_entity.username))
        else:
            full_info = await client(GetFullChannelRequest(group_entity.id))
        
        return {
            'id': group_entity.id,
            'title': group_entity.title,
            'username': getattr(group_entity, 'username', None),
            'participants_count': full_info.full_chat.participants_count,
            'about': full_info.full_chat.about,
            'is_channel': isinstance(group_entity, telethon.tl.types.Channel),
            'is_group': isinstance(group_entity, telethon.tl.types.Channel) and getattr(group_entity, 'megagroup', False),
            'date': getattr(group_entity, 'date', None),
            'photo': getattr(group_entity, 'photo', None) != None
        }
    except Exception as e:
        error_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {str(e)}")
        return None

async def get_messages_stats(client, group_entity, days_count, error_container, progress_bar=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_count)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        messages_per_day = {}
        top_users = {}
        top_users_by_reactions = {}
        reactions_per_day = {}
        views_per_day = {}
        forwards_per_day = {}
        replies_per_day = {}
        total_messages = 0
        total_views = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω–µ–π –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        current_date = start_date
        while current_date <= end_date:
            date_str = current_date.strftime('%Y-%m-%d')
            messages_per_day[date_str] = 0
            reactions_per_day[date_str] = 0
            views_per_day[date_str] = 0
            forwards_per_day[date_str] = 0
            replies_per_day[date_str] = 0
            current_date += timedelta(days=1)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        async for message in client.iter_messages(group_entity, offset_date=end_date, limit=None):
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if message.date < start_date:
                break
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_messages += 1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä)
            if progress_bar is not None:
                progress_bar.progress((end_date - message.date).total_seconds() / (end_date - start_date).total_seconds())
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
            date_str = message.date.strftime('%Y-%m-%d')
            messages_per_day[date_str] = messages_per_day.get(date_str, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
            if hasattr(message, 'views') and message.views:
                views_per_day[date_str] = views_per_day.get(date_str, 0) + message.views
                total_views += message.views
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–æ–∫
            if hasattr(message, 'forwards') and message.forwards:
                forwards_per_day[date_str] = forwards_per_day.get(date_str, 0) + message.forwards
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
            if message.replies:
                replies_per_day[date_str] = replies_per_day.get(date_str, 0) + message.replies.replies
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if message.sender_id:
                sender_id = message.sender_id
                if sender_id not in top_users:
                    try:
                        sender = await client.get_entity(sender_id)
                        sender_name = getattr(sender, 'first_name', '') + ' ' + getattr(sender, 'last_name', '')
                        if not sender_name.strip():
                            sender_name = getattr(sender, 'title', str(sender_id))
                    except:
                        sender_name = str(sender_id)
                    
                    top_users[sender_id] = {
                        'name': sender_name,
                        'count': 0,
                        'views': 0,
                        'reactions': 0
                    }
                
                top_users[sender_id]['count'] += 1
                
                if hasattr(message, 'views') and message.views:
                    top_users[sender_id]['views'] += message.views
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
            if hasattr(message, 'reactions') and message.reactions:
                reaction_count = sum(reaction.count for reaction in message.reactions.results)
                reactions_per_day[date_str] = reactions_per_day.get(date_str, 0) + reaction_count
                
                if message.sender_id:
                    top_users[message.sender_id]['reactions'] += reaction_count
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        sorted_users = sorted(top_users.items(), key=lambda x: x[1]['count'], reverse=True)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∞–∫—Ü–∏–π
        sorted_users_by_reactions = sorted(top_users.items(), key=lambda x: x[1]['reactions'], reverse=True)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        dates = list(messages_per_day.keys())
        messages_count = list(messages_per_day.values())
        reactions_count = [reactions_per_day.get(date, 0) for date in dates]
        views_count = [views_per_day.get(date, 0) for date in dates]
        forwards_count = [forwards_per_day.get(date, 0) for date in dates]
        replies_count = [replies_per_day.get(date, 0) for date in dates]
        
        return {
            'total_messages': total_messages,
            'total_views': total_views,
            'messages_per_day': {'dates': dates, 'values': messages_count},
            'reactions_per_day': {'dates': dates, 'values': reactions_count},
            'views_per_day': {'dates': dates, 'values': views_count},
            'forwards_per_day': {'dates': dates, 'values': forwards_count},
            'replies_per_day': {'dates': dates, 'values': replies_count},
            'top_users': sorted_users[:10],  # –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            'top_users_by_reactions': sorted_users_by_reactions[:10]  # –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º
        }
    except Exception as e:
        error_container.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        return None

def render_group_info(group_info):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
    st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {group_info['title']}")
        st.markdown(f"**ID:** {group_info['id']}")
        if group_info['username']:
            st.markdown(f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** @{group_info['username']}")
        st.markdown(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {group_info['participants_count']:,}")
    
    with col2:
        group_type = "–ö–∞–Ω–∞–ª" if not group_info['is_group'] else "–ì—Ä—É–ø–ø–∞"
        st.markdown(f"**–¢–∏–ø:** {group_type}")
        if group_info['date']:
            st.markdown(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {group_info['date'].strftime('%Y-%m-%d')}")
        st.markdown(f"**–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:** {'–ï—Å—Ç—å' if group_info['photo'] else '–ù–µ—Ç'}")
    
    if group_info['about']:
        st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
        st.markdown(f"_{group_info['about']}_")

def render_message_stats(stats, days_count):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not stats:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π", f"{stats['total_messages']:,}")
    with col2:
        avg_messages = stats['total_messages'] / days_count if days_count > 0 else 0
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å", f"{avg_messages:.1f}")
    with col3:
        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", f"{stats['total_views']:,}")
    
    # –ì—Ä–∞—Ñ–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º
    st.subheader("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
    
    fig, ax = plt.subplots(figsize=(10, 6))
    dates = [datetime.strptime(date, '%Y-%m-%d').date() for date in stats['messages_per_day']['dates']]
    ax.plot(dates, stats['messages_per_day']['values'], marker='o', linestyle='-', color='#1f77b4', label='–°–æ–æ–±—â–µ–Ω–∏—è')
    
    ax.set_xlabel('–î–∞—Ç–∞')
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–∏ X
    plt.xticks(rotation=45)
    fig.tight_layout()
    
    st.pyplot(fig)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º
    if any(stats['views_per_day']['values']):
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates, stats['views_per_day']['values'], marker='o', linestyle='-', color='#ff7f0e', label='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã')
        
        ax.set_xlabel('–î–∞—Ç–∞')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤')
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º')
        
        plt.xticks(rotation=45)
        fig.tight_layout()
        
        st.pyplot(fig)
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º
    if any(stats['reactions_per_day']['values']):
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates, stats['reactions_per_day']['values'], marker='o', linestyle='-', color='#2ca02c', label='–†–µ–∞–∫—Ü–∏–∏')
        
        ax.set_xlabel('–î–∞—Ç–∞')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π')
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π –ø–æ –¥–Ω—è–º')
        
        plt.xticks(rotation=45)
        fig.tight_layout()
        
        st.pyplot(fig)
    
    # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º
    if any(stats['replies_per_day']['values']):
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(dates, stats['replies_per_day']['values'], marker='o', linestyle='-', color='#d62728', label='–û—Ç–≤–µ—Ç—ã')
        
        ax.set_xlabel('–î–∞—Ç–∞')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤')
        ax.grid(True, linestyle='--', alpha=0.7)
        ax.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º')
        
        plt.xticks(rotation=45)
        fig.tight_layout()
        
        st.pyplot(fig)
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    st.subheader("–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    if stats['top_users']:
        top_users_data = [(user[1]['name'], user[1]['count']) for user in stats['top_users']]
        top_users_df = pd.DataFrame(top_users_data, columns=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–°–æ–æ–±—â–µ–Ω–∏—è'])
        
        fig, ax = plt.subplots(figsize=(10, 6))
        bars = ax.bar(top_users_df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'], top_users_df['–°–æ–æ–±—â–µ–Ω–∏—è'], color='#1f77b4')
        
        ax.set_xlabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
        ax.set_title('–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π')
        
        # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –Ω–∞ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        plt.xticks(rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                    f'{int(height)}', ha='center', va='bottom')
        
        fig.tight_layout()
        
        st.pyplot(fig)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.dataframe(top_users_df)
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º
    if any(user[1]['reactions'] for user in stats['top_users_by_reactions']):
        st.subheader("–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º")
        
        top_users_reactions_data = [(user[1]['name'], user[1]['reactions']) for user in stats['top_users_by_reactions'] if user[1]['reactions'] > 0]
        if top_users_reactions_data:
            top_users_reactions_df = pd.DataFrame(top_users_reactions_data, columns=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–†–µ–∞–∫—Ü–∏–∏'])
            
            fig, ax = plt.subplots(figsize=(10, 6))
            bars = ax.bar(top_users_reactions_df['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'], top_users_reactions_df['–†–µ–∞–∫—Ü–∏–∏'], color='#2ca02c')
            
            ax.set_xlabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∞–∫—Ü–∏–π')
            ax.set_title('–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º')
            
            plt.xticks(rotation=45, ha='right')
            
            for bar in bars:
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                        f'{int(height)}', ha='center', va='bottom')
            
            fig.tight_layout()
            
            st.pyplot(fig)
            
            st.dataframe(top_users_reactions_df)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∞–∫—Ü–∏—è—Ö –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Telegram-–≥—Ä—É–ø–ø",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä Telegram-–≥—Ä—É–ø–ø")
    st.markdown("""
    –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ Telegram-–≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.
    –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞.
    """)
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    error_container = st.empty()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        st.subheader("API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        api_id = st.text_input("API ID", help="API ID –æ—Ç my.telegram.org")
        api_hash = st.text_input("API Hash", help="API Hash –æ—Ç my.telegram.org", type="password")
        phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", help="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79123456789")
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
        days_count = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 1, 30, 7, help="–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        st.markdown("---")
        st.markdown("### –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        st.markdown("""
        –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥—Ä—É–ø–ø Telegram –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –∫–∞–Ω–∞–ª–∞—Ö.
        
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
        1. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ API –¥–∞–Ω–Ω—ã–µ (–ø–æ–ª—É—á–∏—Ç—å –Ω–∞ [my.telegram.org](https://my.telegram.org))
        2. –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
        4. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑"
        
        **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.
        """)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    group_link = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª Telegram", help="–ù–∞–ø—Ä–∏–º–µ—Ä, https://t.me/group_name –∏–ª–∏ @group_name")
    
    analyze_button = st.button("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", type="primary")
    
    if analyze_button and group_link:
        with st.spinner("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API..."):
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
            client = await create_client(api_id, api_hash, phone, error_container)
            
            if client is not None and await client.is_user_authorized():
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ..."):
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
                    group_entity = await get_group_entity(client, group_link, error_container)
                    
                    if group_entity:
                        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
                        group_info = await get_group_info(client, group_entity, error_container)
                        
                        if group_info:
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
                            render_group_info(group_info)
                            
                            # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                            with st.spinner(f"–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_count} –¥–Ω–µ–π..."):
                                progress_bar = st.progress(0)
                                message_stats = await get_messages_stats(client, group_entity, days_count, error_container, progress_bar)
                                progress_bar.empty()
                            
                            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                            if message_stats:
                                render_message_stats(message_stats, days_count)
                            else:
                                st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
                # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
                await client.disconnect()
    
    # –ü—É—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    elif not analyze_button and group_link:
        st.info("–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ")
    elif analyze_button and not group_link:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª")

if __name__ == "__main__":
    import asyncio
    import telethon
    from telethon import TelegramClient
    from telethon.tl.functions.channels import GetFullChannelRequest
    import pandas as pd
    import streamlit as st
    import matplotlib.pyplot as plt
    import re
    from datetime import datetime, timedelta
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏ –¥–ª—è matplotlib
    import matplotlib as mpl
    mpl.rcParams['font.family'] = 'DejaVu Sans'
    
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ main
    asyncio.run(main())